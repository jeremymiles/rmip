---
title: "Additional Material for Correlation and Regression Chapters"
subtitle: "Additional material for the chapters 'Correlation' and 'Regression' from Breakwell, et al (2025) Research Methods in Psychology"
editor: visual
title-block-banner: true

format: 
  html5:
    fig-pos: "H"
    embed-resources: true
author:
  - name: Jeremy Miles
    email: jeremy.miles@gmail.com*
    affiliations:
      - id: USC
        name: University of Southern California, Los Angeles
        city: Los Angeles, USA
      - id: Google
        name: Google, Los Angeles, USA
        city: Los Angeles, USA
  - name: Mark Shevlin
    email: m.shevlin@ulster.ac.uk
    affiliations:
      - name: University of Ulster, N Ireland, UK
date: today        
license: "GPL 3.0"
---

*This document contains links to data, and all of the code to reproduce the examples found in the chapters on Correlation and Regression in Breakwell, et al (2025), Research Methods in Psychology, published by Sage.*

*This page is written using [Quarto](https://notebooklm.google.com/notebook/1efedbc4-8bc9-4dc2-af1c-466bd097e424/audio), a scientific publishing system that lets you link data and code to produce a document. This document, and the source code that can be used to create this document can be found at <https://github.com/jeremymiles/rmip>. You will need either [RStudio](https://posit.co/download/rstudio-desktop/) or [Positron](https://positron.posit.co/), both of which are free to download, to compile this document.*

*This document has a [GPL 3.0](https://www.gnu.org/licenses/gpl-3.0.en.html) licence. That means you are free to share, adapt or modify the document, but you also need to share the source code ([the quarto markdown document](https://github.com/jeremymiles/rmip/blob/main/correlation_and_regression.qmd)) for free if you do that.*

*You can find the original version of this document at: <https://jeremymiles.github.io/rmip/correlation_and_regression.html>*

# *(Sort of) Podcasts*

*We have used [NotebookLM](https://notebooklm.google.com/) to create two podcasts that cover the material in each chapter. They are generated by AI, and they are not perfect, they add some information that is not in the chapters, but we think do quite a good job of covering the material in the chapters.*

-   [*Link to correlation 'podcast'*](https://notebooklm.google.com/notebook/1efedbc4-8bc9-4dc2-af1c-466bd097e424/audio) *(\~26 minutes)*

-   [*Link to regression 'podcast'*](https://notebooklm.google.com/notebook/c7730339-2a09-417e-a0d2-922b3a9c9cd9/audio) \*(\~37 minutes)\

    -   

# *Correlation*

## *The Code*

*First we need to load the packages that we're going to be using in the document. If you don't have these installed in your R environment, you need to add them, which you almost certainly do by running:*

*`install.packages("package_name")`*

*Note that in the code below, we've used `output=FALSE` in this code block We did that so that the document isn't full of messages about each package. If you run into problems, change that to `TRUE` and you might get a helpful error message.*

```{r, output=FALSE}
library(boot.pval)
library(car)
library(datasauRus)
library(datasets)
library(dplyr)
library(ggplot2)
library(haven)
library(lmtest)
library(lubridate)
library(MASS)
library(NHANES)
library(QuantPsyc)
library(sandwich)
library(stringr)
library(tidyr)

```

### *Galton*

*First we'll load the Galton data. The data are loaded straight from github, so we assume that you have an internet connection to do this.*

```{r}
d_galton <- 
  read.table(
    paste0("https://raw.githubusercontent.com/jeremymiles/", 
           "rmip/refs/heads/main/Galton.dat"), 
    header = TRUE)

head(d_galton)
```

*We only want to look at the boys, so we will filter the data to include them, and then we can produce the plot in Figure 1.*

```{r}
#| label: fig-1
#| fig-cap: " Scatter plot of heights of fathers and sons from Galton’s data."
d_male <- d_galton %>% 
  dplyr::filter(gender == "M")

# Figure 1
ggplot2::ggplot(d_male, aes(x = father, y = height)) +
  geom_point() +
  ylab("Son's height (inches)") +
  xlab("Father's height (inches)") +
  theme_gray(base_size = 18)

```

*We can calculate the correlation in this data.*

```{r}
cor(d_male$father, d_male$height)
```

## ***Representing Scatterplots***

*Some code to set up the data for the scatterplots.*

```{r}


GenerateCorrelatedNormals <- function(n, mean_x = 0, sd_x = 1, mean_y = 0, sd_y = 1, r) {
  z_temp <- scale(rnorm(n))
  z2 <- scale(resid(lm(z_temp ~ z1)))
  
  # Generate correlated standard normal variables
  x_std <- z1
  y_std <- r * z1 + sqrt(1 - r^2) * z2
  # Scale and shift to desired means and standard deviations
  
  y <- scale(mean_y + sd_y * y_std)
  
  return(y)
}
# setting the seed ensures consistent results
set.seed(42)
n <- 100  # Number of observations
r <- -0.5   # Desired correlation
z1 <- scale(rnorm(n))

d <- data.frame(
  x = z1) %>%
  dplyr::mutate(
    `y: r = 1.00` = GenerateCorrelatedNormals(n, r = 1),
    `y: r = 0.90` = GenerateCorrelatedNormals(n, r = 0.9),
    `y: r = 0.50` = GenerateCorrelatedNormals(n, r = 0.5),
    `y: r = 0.30` = GenerateCorrelatedNormals(n, r = 0.3),
    `y: r = 0.10` = GenerateCorrelatedNormals(n, r = 0.1),
    `y: r = 0.00` = GenerateCorrelatedNormals(n, r = 0.0),
    `y: r = -0.20` = GenerateCorrelatedNormals(n, r = -0.2),
    `y: r = -0.50` = GenerateCorrelatedNormals(n, r = -0.5)
  )

```

```{r}
#| label: fig-2
#| fig-cap: "<i>r</i> = 1.00 All the points are in a straight line."
ggplot2::ggplot(d, aes(x = x, y = `y: r = 1.00`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-3
#| fig-cap: "<i>r</i> = .90 the points are close to the diagonal line, but definitely do not lie on the line."
ggplot2::ggplot(d, aes(x = x, y = `y: r = 0.90`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-4
#| fig-cap: "<i>r</i> = .50. It’s still clear that there’s a positive relationship, but it is not <i>as</i> clear."
ggplot2::ggplot(d, aes(x = x, y = `y: r = 0.50`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-5
#| fig-cap: "<i>r</i> = 0.30. It’s now less clear that there is a positive relationship."
ggplot2::ggplot(d, aes(x = x, y = `y: r = 0.30`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-6
#| fig-cap: "<i>r</i> = .10. We don’t think that it’s possible to tell the difference between a relationship of .1 and of zero by looking at the plot."
ggplot2::ggplot(d, aes(x = x, y = `y: r = 0.10`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-7
#| fig-cap: "<i>r</i> = 0.00. We don’t think that it’s possible to tell the difference between a relationship of .1 and of zero by looking at the plot."
ggplot2::ggplot(d, aes(x = x, y = `y: r = 0.00`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-8
#| fig-cap: "<i>r</i> = -.20 A small negative relationship - not easy to see."
ggplot2::ggplot(d, aes(x = x, y = `y: r = -0.20`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-9
#| fig-cap: "<i>r</i> = -.50 this clearly shows a negative relationship - higher values of x are associated with lower values of y.."
ggplot2::ggplot(d, aes(x = x, y = `y: r = -0.50`)) +
  geom_point() +
  scale_x_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-3.5, 3.5), # Sets the axis limits
    breaks = seq(-3, 3, by = 1) # Sets the tick mark locations
  ) +
  theme_gray(base_size = 18)
```

## *Correlation Formula*

*Most people aren't very interested in this part. If you're doing calculating a correlation, you're almost certainly doing it on a computer, so the formula isn't very enlightening. We didn't bother putting it into the chapter, so we're adding it here instead.*

*(Needs expanding)*

$$
r_{xy} = \frac{\sum_{i=1}^{n} (x_i - \bar{x})(y_i - \bar{y})}{\sqrt{\sum_{i=1}^{n} (x_i - \bar{x})^2} \sqrt{\sum_{i=1}^{n} (y_i - \bar{y})^2}} 
$$

## *Correlation Assumptions*

### *Linearity*

#### *Yerkes-Dodson*

```{r}
#| label: fig-10
#| fig-cap: "The Yerkes-Dodson law of arousal and performance. The graph shows that the two variables are related, but the correlation is <i>r</i> = -0.01."
#| warning: false  # remove warning about missing data 


d <- data.frame(stress = rnorm(100)) %>%
  dplyr::mutate(performance = -(stress^2) + rnorm(100) * 0.1) %>%
  dplyr::filter(performance > -4)
ggplot2::ggplot(
  d, aes(x = stress, y = performance)
) +
  geom_point() +
  scale_x_continuous(
    limits = c(-2, 2), # Sets the axis limits
    breaks = seq(-2, 2, by = 1) # Sets the tick mark locations
  ) +
  scale_y_continuous(
    limits = c(-4, 1), # Sets the axis limits
    breaks = seq(-4, 1, by = 1) # Sets the tick mark locations,
    
  ) +
  theme_gray(
    base_size = 18
  ) +
  theme(
    axis.text.x = element_blank(),
    axis.text = element_blank()
  )

yd_cor <- cor(d)[1, 2]

```

*The correlation between stress and performance is `{r} round(yd_cor, 2)`.*

#### *NHANES age and Height*

```{r}
#| label: fig-11
#| fig-cap: " Relationship between height and age from the NHANES dataset"
#| warning: false

data(NHANES)
cor_all <-  NHANES %>% 
  dplyr::select(Age, Height) %>%
  cor(use = "pair")

ggplot2::ggplot(NHANES, aes(x = Age, y = Height)) +
  geom_point() +
  theme_gray(base_size = 18)+
  ylab("Height (cm)") +
  xlab("Age (years)")

cor_0_18 <- NHANES %>% 
  dplyr::select(Age, Height) %>%
  dplyr::filter(Age <= 18) %>% 
  cor(use = "pair")

cor_19_plus <- NHANES %>% 
  dplyr::select(Age, Height) %>%
  dplyr::filter(Age > 18) %>% 
  cor(use = "pair")

```

*For all groups combined, correlation between age and height is* <i>*r*</i> *= `{r}  round(cor_all[2, 1], 2)`. For people aged up to 18, the correlation is* <i>*r*</i> *= `{r} round(cor_0_18[2, 1], 2)`, and for those over 18,* <i>*r*</i> *= `{r} round(cor_19_plus[2, 1], 2)`.*

### Outliers

#### Monarchs

*Read in the monarchs data.*

```{r}

monarchs <- read.csv("https://raw.githubusercontent.com/jeremymiles/rmip/refs/heads/main/monarchs.csv")

# convert birth variable to date format, deal with William and Mary, 
# and create gender variable. 

monarchs <- monarchs %>%
  dplyr::mutate(
    birth = as.Date(birth),
    years =  as.numeric(gsub(",", "", days)) / 365.25,
    name = ifelse(
      name == "King William III and Queen Mary II", 
      "King William III", 
      name),
    gender = 
      ifelse(stringr::str_detect(name, "Queen"), "Queen", "King")
  )

head(monarchs)

```

```{r}
#| label: fig-12
#| fig-cap: "Dates of birth and ages at death for British monarchs since William I. Kings are indicated with circles, queens with triangles."
ggplot2::ggplot(
  monarchs, aes(x = birth, y = years, shape = gender)
) +
  geom_point(size = 3) +
  theme_gray(base_size = 18) + 
  xlab("Date of Birth") + 
  ylab("Age at Death") +
  labs(shape = NULL)
```

```{r}

monarch_cor_all <- monarchs %>% 
  dplyr::mutate(
    birth = as.numeric(birth)
  ) %>%
  dplyr::select(birth, years) %>%
  cor()


monarchs_cor_no_elizabeth <- monarchs %>% 
  dplyr::filter(name != "Queen Elizabeth II"
) %>%
  dplyr::mutate(
    birth = as.numeric(birth)
  ) %>%
  dplyr::select(birth, years) %>%
  cor()


monarchs_cor_no_queens <- monarchs %>% 
    dplyr::filter(!stringr::str_detect(name, "Queen")
  ) %>%
  dplyr::mutate(
    birth = as.numeric(birth)
  ) %>%
  dplyr::select(birth, years) %>%
  cor()


kings_reigned <- monarchs %>% 
    dplyr::filter(!stringr::str_detect(name, "Queen")
  ) %>%
  dplyr::filter(years > 20)

ggplot2::ggplot(
  kings_reigned, aes(x = birth, y = years)
) +
  geom_point(size = 3) +
  theme_gray(base_size = 18) + 
  xlab("Date of Birth") + 
  ylab("Age at Death")

kings_cor_reigned <- kings_reigned %>% 
  dplyr::mutate(
    birth = as.numeric(birth)
  ) %>%
  dplyr::select(birth, years) %>%
  cor()



```

| Data                   | Correlation                                     |
|------------------------|-------------------------------------------------|
| All Monarchs           | `{r} round(monarch_cor_all[2, 1], 2)`           |
| No Elizabeth II        | `{r} round(monarchs_cor_no_elizabeth[2, 1], 2)` |
| Kings Only             | `{r} round(monarchs_cor_no_queens[2, 1], 2)`    |
| Kings who Reigned Only | `{r} round(kings_cor_reigned[2, 1], 2)`         |

#### Anscombe

```{r}
#| label: fig-13
#| fig-cap: " The Anscombe Quartet."
data(anscombe)

# To use ggplot facets we need data in long format
long_data <- anscombe %>%
  dplyr::mutate(id = row_number()) %>%
  tidyr::pivot_longer(
    cols = c(x1, x2, x3, x4, y1, y2, y3, y4),
    names_to = "variable",
    values_to = "value"
  ) %>%
  tidyr::separate(
    variable,
    into = c("type", "number"),
    sep = 1 # Split at the first character
  ) %>%
  tidyr::pivot_wider(
    names_from = type,
    values_from = value
  ) %>%
  dplyr::mutate(plot = paste0("Plot ", number))

ggplot2::ggplot(
  long_data, 
  aes(x = x, y = y)
  ) +
  geom_point() +
  facet_wrap(~ plot) +
  theme_gray(base_size = 18) 

  
```

#### Datasaurus

The plots below show the datasaurus plots, and a table of means, standard deviations and correlations.

```{r}
#| label: fig-14
#| fig-cap: "The datasaurus examples."
#| out-width: 100%
#| fig-width: 8
#| fig-height: 10



data(datasaurus_dozen)

ggplot2::ggplot(
  datasaurus_dozen,
  aes(x = x, y = y)) +
  geom_point(size = 1) +
  theme_gray(base_size = 18) +
  facet_wrap(~dataset)

datasaurus_dozen %>%
  dplyr::group_by(dataset) %>%
  dplyr::summarise(
    mean_x = mean(x) %>% round(2),
    mean_y = mean(y) %>% round(2),
    sd_x = sd(x) %>% round(2),
    sd_y = sd(y) %>% round(2),
    cor = cor(x, y) %>% round(2)
  ) %>% knitr::kable()


```

### Normal Distribution

```{r}
#| label: fig-15a
#| fig-cap: "Figure 15a: Scatterplot showing bivariate normality."

set.seed(42)
r <- 0.76
Sigma <- matrix(c(1, r, r, 1), nrow = 2)
d <- MASS::mvrnorm(n = 25, mu = c(0, 0), Sigma = Sigma, empirical = TRUE) %>%
  as.data.frame() %>%
  purrr::set_names(c("x", "y"))

ggplot2::ggplot(d, aes(x = x, y = y)) +
  geom_point() +
  xlim(c(-3.5, 3.5)) +
  ylim(c(-3.5, 3.5)) +
  theme_gray(base_size = 18) 

```

```{r}
#| label: fig-15b
#| fig-cap: "Boxplot showing that X and Y are both approximately normally distributed"


d_long <- d %>%
  tidyr::pivot_longer(
    cols = c("x", "y")
  )

d_long %>%
  ggplot2::ggplot(aes(x = name, y = value)) +
  geom_boxplot() +
  theme_gray(base_size = 18) +
  ylim(c(-3.5, 3.5))

```

```{r}
#| label: fig-15c
#| fig-cap: "Scatterplot showing bivariate outlier"



d2 <- d %>%
  dplyr::bind_rows(data.frame(x = -2, y = 2))

ggplot2::ggplot(d2, aes(x = x, y = y)) +
  geom_point() +
  xlim(c(-3.5, 3.5)) +
  ylim(c(-3.5, 3.5)) +
  theme_gray(base_size = 18)
```

```{r}
#| label: fig-15d
#| fig-cap: "Boxplot showing that X and Y are both approximately normally distributed (even when there is a bivariate outlier)"



d2_long <- d2 %>%
  tidyr::pivot_longer(
    cols = c("x", "y")
  )

d2_long %>%
  ggplot2::ggplot(aes(x = name, y = value)) +
  geom_boxplot() +
  theme_gray(base_size = 18)  +
  ylim(c(-3.5, 3.5))

```
